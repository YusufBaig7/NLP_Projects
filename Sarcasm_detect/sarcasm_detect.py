# -*- coding: utf-8 -*-
"""Sarcasm_detect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uvCA-ighD14LWlBJpdY8w8Agq3vrkCSj
"""

import tensorflow as tf
import numpy as np
import json
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

vocab = 10000
max_length = 100
embedding_dim = 16
trunc_type = 'post'
pad_type = 'post'
oov_tok = "<OOV>"
training_size = 20000

!wget --no-check-certificate \
    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/sarcasm.json \
    -O /tmp/sarcasm.json

with open("/tmp/sarcasm.json", "r") as f:
    datastore = json.load(f)

sentences = []
labels = []

for item in datastore:
  sentences.append(item['headline'])
  labels.append(item['is_sarcastic'])

training_sentence = sentences[0:training_size]
training_labels = labels[0:training_size]
test_sentence = sentences[training_size:]
test_labels = labels[training_size:]

tokenizer = Tokenizer(num_words=vocab, oov_token=oov_tok)
tokenizer.fit_on_texts(training_sentence)

word_index = tokenizer.word_index

training_seq = tokenizer.texts_to_sequences(training_sentence)
training_pad = pad_sequences(training_seq, maxlen = max_length, padding=pad_type, truncating=trunc_type)

test_seq = tokenizer.texts_to_sequences(test_sentence)
test_pad = pad_sequences(test_seq, maxlen = max_length, padding=pad_type, truncating=trunc_type)

training_pad = np.array(training_pad)
training_labels = np.array(training_labels)
test_pad = np.array(test_pad)
test_labels = np.array(test_labels)

model = tf.keras.Sequential([
     tf.keras.layers.Embedding(vocab, embedding_dim, input_length=max_length),
     tf.keras.layers.GlobalAveragePooling1D(),
     tf.keras.layers.Dense(24, activation='relu'),
     tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(loss = 'binary_crossentropy',optimizer = 'Adam', metrics =['accuracy'] )

model.summary()

num_epoch = 30
history = model.fit(training_pad, training_labels, epochs=num_epoch, validation_data=(test_pad, test_labels), verbose =1)

sentence = ["granny starting to fear spiders in the garden might be real", "game of thrones season finale showing this sunday night"]
sequences = tokenizer.texts_to_sequences(sentence)
padded = pad_sequences(sequences, maxlen=max_length, padding=pad_type, truncating=trunc_type)
print(model.predict(padded))